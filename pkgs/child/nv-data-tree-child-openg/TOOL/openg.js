const edge=require("nv-data-tree-edge"),{is_int}=require("nv-facutil-basic");function _0(e,n,r,t,_){return null!==(_=_??n.tree(e))?(edge[r](n.max_size,n.eary,n.vertexes,t.$id_,_.$id_),_):null}function _1(e,n,r,t,_){return t.$is_root()?null:_0(e,n,r,t,_)}function _2(e,n,r,t){e=n.tree(e);return null===e?null:(edge[r](n.max_size,n.eary,n.vertexes,t.$id_,e.$id_),e)}function _3(e,n,r,t,_){_=edge[r](n.max_size,n.eary,n.vertexes,t.$id_,_.$id_);return-1===_||0===_?null:t}function _4(n,r,e,t,_){let i;return _=is_int(_)?(i=Array.from({length:_}).map(e=>r.tree(n)),i=i.filter(e=>null!==e),i.map(e=>e.$id_)):(i=_).map(e=>e.$id_),edge[e](r.max_size,r.eary,r.vertexes,t.$id_,_),i}function _5(e,n,r,t,_,i){if(null===(_=_??n.tree(e)))return null;i=edge[r](n.max_size,n.eary,n.vertexes,t.$id_,_.$id_,i);return-1===i||0===i?null:_}function _6(n,r,e,t,_,i){let d;return _=is_int(_)?(d=Array.from({length:_}).map(e=>r.tree(n)),d=d.filter(e=>null!==e),d.map(e=>e.$id_)):(d=_).map(e=>e.$id_),console.log(d),edge[e](r.max_size,r.eary,r.vertexes,t.$id_,_,i),d}function _7(e,n,r,t){t=edge[r](n.max_size,n.eary,n.vertexes,t.$id_);return 0===t?null:n.mp.get(t)}function _8(e,n,r,t,_){_=edge[r](n.max_size,n.eary,n.vertexes,t.$id_,_);return 0===_?null:n.mp.get(_)}function _9(e,n,r,t){let _=edge[r](n.max_size,n.eary,n.vertexes,t.$id_);return _.map(e=>n.mp.get(e))}function _10(e,n,r,t,_){let i=edge[r](n.max_size,n.eary,n.vertexes,t.$id_,_);return i.map(e=>n.mp.get(e))}function _11(e,n,r,t,_){edge[r](n.max_size,n.eary,n.vertexes,t.$id_,_.$id_)}function _12(r,t,e,n){let _=edge[e](t.max_size,t.eary,t.vertexes,n.$id_);_.forEach(e=>{let n=t.mp.get(e);n[r.SYM_DICT.release_forest](),t.mp.delete(e)})}const DFTT_CLONE_FUNC=(e,n)=>{for(var r in e)n[r]=e[r]};function _13(r,t,e,_,i=DFTT_CLONE_FUNC){let[n,d]=edge[e](t.max_size,t.eary,t.vertexes,_.$id_,t.idpool);return 0===n||-1===n||void 0===n?null:(d.forEach(e=>{var n=new r(t,e);null!==n&&(i(_,n),t.mp.set(e,n))}),t.mp.get(n))}function _14(e,n,r,t){return n.mp.delete(t.$id_),t[e.SYM_DICT.release_forest](),_9(e,n,r,t)}module.exports={$append_child:function(e,n,r,t){return _0(e,n,"$append_child",r,t)},$prepend_child:function(e,n,r,t){return _0(e,n,"$prepend_child",r,t)},$add_rsib:function(e,n,r,t){return _1(e,n,"$add_rsib",r,t)},$add_lsib:function(e,n,r,t){return _1(e,n,"$add_lsib",r,t)},$add_parent:function(e,n,r){return _2(e,n,"$add_parent",r)},$connto:function(e,n,r,t){return _3(e,n,"$connto",r,t)},$append_children:function(e,n,r,t){return _4(e,n,"$append_children",r,t)},$prepend_children:function(e,n,r,t){return _4(e,n,"$prepend_children",r,t)},$add_rsibs:function(e,n,r,t){return _4(e,n,"$add_rsibs",r,t)},$add_lsibs:function(e,n,r,t){return _4(e,n,"$add_lsibs",r,t)},$insert_child_at:function(e,n,r,t,_){return _5(e,n,"$insert_child_at",r,t,_)},$insert_children_at:function(e,n,r,t,_){return _6(e,n,"$insert_children_at",r,t,_)},$disconn:function(e,n,r){return _7(e,n,"$disconn",r)},$rm_fstch:function(e,n,r){return _7(e,n,"$rm_fstch",r)},$rm_lstch:function(e,n,r){return _7(e,n,"$rm_lstch",r)},$rm_child:function(e,n,r,t){return _8(e,n,"$rm_child",r,t)},$rm_children:function(e,n,r){return _9(e,n,"$rm_children",r)},$rm_some_children:function(e,n,r,t){return _10(e,n,"$rm_some_children",r,t)},$replace_with:function(e,n,r,t){return _3(e,n,"$replace_with",r,t),t},$replace_child_at:function(e,n,r,t,_){return _5(e,n,"$replace_child_at",r,t,_)},$swap:function(e,n,r,t){_11(e,n,"$swap",r,t)},$erase:function(e,n,r){return _14(e,n,"$erase",r)},$erase_r:function(e,n,r){_12(e,n,"$erase_r",r)},DFTT_CLONE_FUNC:DFTT_CLONE_FUNC,$clone:function(e,n,r,t=DFTT_CLONE_FUNC){return _13(e,n,"$clone",r,t)}};